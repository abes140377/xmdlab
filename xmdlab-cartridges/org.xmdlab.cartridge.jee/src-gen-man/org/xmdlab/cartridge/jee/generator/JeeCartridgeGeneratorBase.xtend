/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.generator.CartridgeGeneratorBaseXtendTpl
 */
package org.xmdlab.cartridge.jee.generator

import com.google.inject.Inject
import com.google.inject.Provider
import org.eclipse.xtext.generator.IFileSystemAccess
import org.xmdlab.cartridge.common.generator.IGenerator
import org.xmdlab.cartridge.jee.templates.ReadmeMdTpl
import org.xmdlab.cartridge.jee.templates.EntityTpl
import org.xmdlab.cartridge.jee.metafacade.ApplicationMetafacade
import org.xmdlab.jee.application.mm.Application
import org.xmdlab.jee.application.mm.Entity
import java.util.Iterator

/**
 * The JeeCartridgeGeneratorBase
 *
 * @author Sebastian Freund<seba1403@googlemail.com>
 *
 */
abstract class JeeCartridgeGeneratorBase implements IGenerator {

	@Inject Provider<ReadmeMdTpl> readmeMdTpl
	@Inject Provider<EntityTpl> entityTpl
	@Inject ApplicationMetafacade applicationMetafacade

	/**
	* This method is a long sequence of calling all templates for the code generation
	*/
	override void doGenerate(IFileSystemAccess fsa) {
		// compile templates
		beforeCompileReadmeMd()
		compileReadmeMd(fsa)
		afterCompileReadmeMd()
		
		val Application application = applicationMetafacade.modelResource
		
		val Iterator<Entity> entities = application.eAllContents.filter(Entity)
		
		for(e : entities.toList) {
			beforeCompileEntity()
			compileEntity(fsa)
			afterCompileEntity()	
		}
	}
	
	def void beforeCompileEntity() {}
	
	def void compileEntity(IFileSystemAccess fsa) {
		val EntityTpl tpl = entityTpl.get
		
		val String fileName = "README.md"
		
		fsa.generateFile(fileName, tpl.generate())
	}
	
	def void afterCompileEntity() {}

	/**
	 *
	 */
	def void beforeCompileReadmeMd() {}

	/**
	 *
	 */
	def compileReadmeMd(IFileSystemAccess fsa) {
		val ReadmeMdTpl tpl = readmeMdTpl.get

		val String fileName = "README.md"

		//fsa.generateFile(fileName, OUTPUTCONFIG_BASE, tpl.generate())
		fsa.generateFile(fileName, tpl.generate())
	}

	/**
	 *
	 */
	def void afterCompileReadmeMd() {}
}
