/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.transformation.CartridgeTransformationXtendTpl
 */
package org.xmdlab.cartridge.jee.transformation

import com.google.inject.Inject
import java.util.List
import org.eclipse.xtext.EcoreUtil2
import org.slf4j.Logger
import org.slf4j.LoggerFactory
import org.xmdlab.cartridge.jee.util.HelperBase
import org.xmdlab.dsl.application.applicationDsl.DslApplication
import org.xmdlab.dsl.application.applicationDsl.DslAttribute
import org.xmdlab.dsl.application.applicationDsl.DslCollectionType
import org.xmdlab.dsl.application.applicationDsl.DslEntity
import org.xmdlab.dsl.application.applicationDsl.DslModule
import org.xmdlab.dsl.application.applicationDsl.DslService
import org.xmdlab.dsl.application.applicationDsl.DslSimpleDomainObject
import org.xmdlab.jee.application.mm.DomainObject
import org.xmdlab.jee.application.mm.MmApplication
import org.xmdlab.jee.application.mm.MmFactory

/**
 * 
 */
class JeeCartridgeTransformation extends JeeCartridgeTransformationBase {
	val static final Logger LOG = LoggerFactory.getLogger(JeeCartridgeTransformation)

	@Inject extension HelperBase
	private static val MmFactory FACTORY = MmFactory::eINSTANCE

	var MmApplication mmAppplication
	var DslApplication dslApplication

	/**
	 * 
	 */
	override create FACTORY.createMmApplication transform(DslApplication dslApplication) {
		LOG.info("transform dslApplication: " + dslApplication)

		this.mmAppplication = it
		this.dslApplication = dslApplication

		name = dslApplication.name
		basePackage = dslApplication.basePackage

		val List<DslModule> allDslModules = EcoreUtil2::eAllOfType(dslApplication, typeof(DslModule))
		modules.addAll(allDslModules.map[e|transform(e)])
	}

	/**
	 * 
	 */
	def create FACTORY.createMmModule transform(DslModule dslModule) {
		LOG.info("transform dslModule: " + dslModule)
		
		it.application = mmAppplication
		
		it.basePackage = mmAppplication.basePackage + "." + dslModule.name
		it.doc = dslModule.doc
		it.name = dslModule.name
		it.hint = dslModule.hint

		it.domainObjects.addAll(dslModule.domainObjects.map[e|transformSimpleDomainObject(e)])

		it.services.addAll(dslModule.services.map[e|transform(e)])
	}

	/**
	 * 
	 */
	def create FACTORY.createMmService transform(DslService dslService) {
		LOG.info("transform dslService: " + dslService)
		module = (dslService.eContainer as DslModule).transform
		doc = dslService.doc
		name = dslService.name
		hint = dslService.hint
	}

	private def DomainObject dummyCreateDomainObject() {
		null
	}

	/**
	 * this "method" is not used, it is kind of "abstract"
	 */
	def dispatch create dummyCreateDomainObject transformSimpleDomainObject(DslSimpleDomainObject dslSimpleDomainObject) {
		throw new RuntimeException(
			"Wrong type of domainObject " + dslSimpleDomainObject.name + "[" + (dslSimpleDomainObject.^class.simpleName) +
				"] passed into transformSimpleDomainObject")
	}

	/**
	 * 
	 */
	def dispatch create FACTORY.createMmEntity transformSimpleDomainObject(DslEntity domainObject) {
		LOG.info("transformSimpleDomainObject domainObject: " + domainObject)
		
		module = (domainObject.eContainer as DslModule).transform
		
		name = domainObject.name
		
		val tSubPackage = if (!domainObject.^package.isNullOrEmpty) '.' + domainObject.^package else ''
		
		^package = module.basePackage + tSubPackage

		attributes.addAll(domainObject.attributes.map[e|transform(e)])
	}

	/**
	 * 
	 */
	def create FACTORY.createMmAttribute transform(DslAttribute dslAttribute) {
		LOG.info("transform dslAttribute: " + dslAttribute)
		doc = dslAttribute.doc
		name = dslAttribute.name
		type = dslAttribute.type
		collectionType = convertCollectionTypeEnum(dslAttribute.collectionType)
		naturalKey = dslAttribute.key
		changeable = !dslAttribute.notChangeable
		required = dslAttribute.required
		nullable = dslAttribute.nullable
		index = dslAttribute.index
		length = dslAttribute.length
		validate = dslAttribute.handleValidation()
	}

	// ==========================================================================================
	def String handleValidation(DslAttribute attribute) {
		(if(attribute.validate != null) attribute.validate else "") +
			handleParameterizedAnnotation("digits", "integer,fraction,message", attribute.digits, attribute.validate) +
			handleParameterizedAnnotation("size", "min,max,message", attribute.size, attribute.validate) +
			handleBooleanAnnotation("assertTrue", attribute.assertTrue, attribute.assertTrueMessage, attribute.validate) + handleBooleanAnnotation(
				"assertFalse", attribute.assertFalse, attribute.assertFalseMessage, attribute.validate) + handleBooleanAnnotation(
				"notNull", !attribute.nullable && !attribute.type.isPrimitiveType(), attribute.nullableMessage,
				attribute.validate) +
			handleBooleanAnnotation("future", attribute.future, attribute.futureMessage, attribute.validate) +
			handleBooleanAnnotation("past", attribute.past, attribute.pastMessage, attribute.validate) +
			handleSimpleAnnotation("min", attribute.min, attribute.validate) +
			handleSimpleAnnotation("max", attribute.max, attribute.validate) +
			handleSimpleAnnotation("decimalMin", attribute.decimalMin, attribute.validate) +
			handleSimpleAnnotation("decimalMax", attribute.decimalMax, attribute.validate) +
			handleParameterizedAnnotation("pattern", "regexp,message", attribute.pattern, attribute.validate) + handleBooleanAnnotation(
				"creditCardNumber", attribute.creditCardNumber, attribute.creditCardNumberMessage,
				attribute.validate) +
			handleBooleanAnnotation("email", attribute.email, attribute.emailMessage, attribute.validate) +
			handleBooleanAnnotation("notEmpty", attribute.notEmpty, attribute.notEmptyMessage, attribute.validate) +
			handleBooleanAnnotation("notBlank", attribute.notBlank, attribute.notBlankMessage, attribute.validate) + handleParameterizedAnnotation(
				"scriptAssert", "lang,script,alias,message", attribute.scriptAssert, attribute.validate) +
			handleParameterizedAnnotation("url", "protocol,host,port,message", attribute.url, attribute.validate) +
			handleParameterizedAnnotation("range", "min,max,message", attribute.range, attribute.validate) +
			handleParameterizedAnnotation("length", "max,min,message", attribute.length, attribute.validate)
	}

	/**
	 * 
	 */
	def String convertCollectionTypeEnum(DslCollectionType collectionType) {
		if (collectionType == null || collectionType == DslCollectionType::NONE)
			null
		else
			collectionType.toString()
	}
}
