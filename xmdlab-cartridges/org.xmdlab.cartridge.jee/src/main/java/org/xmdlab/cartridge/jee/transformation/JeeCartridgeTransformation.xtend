/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.transformation.CartridgeTransformationXtendTpl
 */
package org.xmdlab.cartridge.jee.transformation

import org.xmdlab.dsl.application.applicationDsl.DslApplication
import org.xmdlab.dsl.application.applicationDsl.DslModule
import org.xmdlab.jee.application.mm.Application
import org.xmdlab.jee.application.mm.MmFactory

class JeeCartridgeTransformation extends JeeCartridgeTransformationBase {

	//	@Inject extension HelperBase
	private static val MmFactory FACTORY = MmFactory::eINSTANCE

	var Application globalApp

	override create FACTORY.createApplication transform(DslApplication dslApplication) {
		globalApp = it

		name = dslApplication.name
		basePackage = dslApplication.basePackage

	//		
	//		val List<DslModule> allDslModules = EcoreUtil2::eAllOfType(dslApp, typeof(DslModule))
	//		modules.addAll(allDslModules.map[e | transform(e)])
	}

	def create FACTORY.createModule transform(DslModule dslModule) {
		//		application = globalApp
		//		
		//		basePackage = dslModule.basePackage
	}

// this "method" is not used, it is kind of "abstract"
//	def dispatch create FACTORY.createModel transformSimpleDomainObject(DslSimpleDomainObject domainObject) {
//		error("Wrong type of domainObject "+domainObject.name+"["+ (domainObject.^class.simpleName) +"] passed into transformSimpleDomainObject")
//	}
//	
//	def dispatch create FACTORY.createModel transformSimpleDomainObject(DslEntity domainObject) {
//		module = (domainObject.eContainer as DslModule).transform
//		name = domainObject.name
//		^package = domainObject.^package
//		
//		attributes.addAll(domainObject.attributes.map[e | transform(e)])
//	}
//	
//	def create FACTORY.createAttribute transform(DslAttribute attribute) {
//		name = attribute.name
//		type = attribute.type
//	}
}
