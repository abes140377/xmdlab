apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'

description = 'AppManager domain - contains domain model'

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
	maven { url 'http://repository.jboss.org/nexus/content/repositories/deprecated' }
	maven { url 'http://repo.jfrog.org/artifactory/repo' }
}

ext.libraryVersions = [
	javaee                  : '7.0',
	wildfly                 : '8.2.0.Final',
	glassfish				: '4.0',
	junit                   : '4.11',
	arquillian              : '1.1.5.Final',
	shrinkWrapResolverGradle: '2.1.0'
]

configurations {
	provided

	glassfishEmbeddedTestRuntime { extendsFrom testRuntime }
	jbossEmbeddedTestRuntime { extendsFrom testRuntime, provided }
	jbossRemoteTestRuntime { extendsFrom testRuntime }
}

dependencies {
	compile 'org.slf4j:slf4j-simple:1.7.7'
	compile "javax:javaee-api:${libraryVersions.javaee}"

	testCompile "junit:junit:${libraryVersions.junit}"

	testRuntime "com.h2database:h2:1.3.166"

	testCompile "org.jboss.arquillian.junit:arquillian-junit-container:${libraryVersions.arquillian}"
	testCompile "org.jboss.arquillian.protocol:arquillian-protocol-servlet:${libraryVersions.arquillian}"

	testCompile "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:${libraryVersions.shrinkWrapResolverGradle}"

	jbossEmbeddedTestRuntime "org.wildfly:wildfly-arquillian-container-managed:${libraryVersions.wildfly}"

	jbossRemoteTestRuntime "org.wildfly:wildfly-arquillian-container-remote:${libraryVersions.wildfly}"

	glassfishEmbeddedTestRuntime group: 'org.jboss.arquillian.container', name: 'arquillian-glassfish-embedded-3.1', version: '1.0.0.CR4'
	glassfishEmbeddedTestRuntime group: 'org.glassfish.main.extras', name: 'glassfish-embedded-all', version: libraryVersions.glassfish
}

task jbossEmbeddedTest(type: Test)

jbossEmbeddedTest {
	include '**/integration/*'
	
	systemProperty 'arquillian.launch', "jbossas-embedded"
	systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
}

task jbossRemoteTest(type: Test)

jbossRemoteTest {
	include '**/integration/*'
	
	systemProperty 'arquillian.launch', "jbossas-remote" 
}

task glassfishEmbeddedTest(type: Test) {
	include '**/integration/*'
	
	systemProperty 'arquillian.launch', "glassfish-embedded"
	systemProperty 'java.util.logging.config.file', "${projectDir}/src/test/resources-glassfish-embedded/logging.properties"
	systemProperty 'derby.stream.error.file', '${projectDir}/build/derby.log'
}

sourceSets {

	test {
		resources { srcDir 'src/test/resources' }
		resources { srcDir 'src/test/resources-jbossas-embedded' }

		compileClasspath += main.output + configurations.provided + main.compileClasspath
		runtimeClasspath += main.output + configurations.provided + main.compileClasspath + main.runtimeClasspath
	}
}

tasks.withType(Test).matching({ t-> t.name.endsWith('Test') } as Spec).each { t ->

	if (System.getProperty('test.debug', 'false') == 'true') {
		t.jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
	}
	if (System.getProperty('test.single', '') != '') {
		t.includes = [
			System.getProperty('test.single')
		]
	}
	t.testLogging.showStandardStreams = true
	t.testClassesDir = project.sourceSets.test.output.classesDir
	t.classpath = project.configurations.getByName(t.name + 'Runtime') +
			project.sourceSets.main.output +
			project.sourceSets.test.output
	if (t.name.startsWith('jbossEmbedded')) {
		t.classpath += files('src/test/resources-jbossas-embedded')
	} else if(t.name.startsWith('glassfishEmbedded')){
		t.classpath += files('src/test/resources-glassfish-embedded')
	}
}

test {
	exclude '**/integration/*'
	testLogging.showStandardStreams = true

	jvmArgs '-XX:MaxPermSize=256m'
}

eclipse {
	classpath {
		//you can tweak the classpath of the Eclipse project by adding extra configurations:
		plusConfigurations += [
			configurations.jbossEmbeddedTestRuntime
		]

		//default settings for downloading sources and Javadoc:
		downloadSources = true
		downloadJavadoc = false
	}
}