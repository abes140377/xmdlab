apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
// enable generation of querydsl query types
apply plugin: "com.ewerk.gradle.plugins.querydsl"

description = 'AppManager domain - contains domain model'

buildscript {
  repositories {
  	mavenLocal()
    jcenter()
  }
  dependencies {
    classpath 'com.ewerk.gradle.plugins:querydsl-plugin:1.0.3'
  }
}

repositories {
	mavenLocal()
	mavenCentral()
	maven { url 'http://repository.jboss.org/nexus/content/groups/public' }
	maven { url 'http://repository.jboss.org/nexus/content/repositories/deprecated' }
	maven { url 'http://repo.jfrog.org/artifactory/repo' }
}

ext.libraryVersions = [
	slf4jVersion					: '1.7.7',
	springDataVersion				: '1.7.2.RELEASE',
	javaeeVersion                  	: '7.0',
	wildflyVersion                 	: '8.2.0.Final',
	glassfishVersion				: '4.0',
	junitVersion                   	: '4.11',
	arquillianVersion              	: '1.1.5.Final',
	arquillianPersistenceVersion	: '1.0.0.Alpha7',
	shrinkWrapResolverGradleVersion	: '2.1.0',
	hibernateVersion				: '4.3.5.Final',
	querydslVersion					: '3.6.0',
]

configurations {
	apt { description 'for annotation processors' }
	provided

	glassfishEmbeddedTestRuntime { extendsFrom testRuntime }
	jbossEmbeddedTestRuntime { extendsFrom testRuntime, provided }
	jbossRemoteTestRuntime { extendsFrom testRuntime }
}

dependencies {
	compile project(':xmdlab-framework-jee')
	
	compile "org.slf4j:slf4j-simple:${libraryVersions.slf4jVersion}"
	compile "javax:javaee-api:${libraryVersions.javaeeVersion}"

	testCompile "junit:junit:${libraryVersions.junitVersion}"
	testCompile "org.hamcrest:hamcrest-library:1.3"

	testRuntime "com.h2database:h2:1.4.177"

	compile "com.mysema.querydsl:querydsl-core:${libraryVersions.querydslVersion}"
	compile "com.mysema.querydsl:querydsl-jpa:${libraryVersions.querydslVersion}"

	// Spring data
	compile "org.springframework.data:spring-data-jpa:${libraryVersions.springDataVersion}"

	// arquillian persistence extension
	// testCompile "org.jboss.arquillian.extension:arquillian-persistence-api:${libraryVersions.arquillianPersistenceVersion}"
	// testCompile "org.jboss.arquillian.extension:arquillian-persistence-core:${libraryVersions.arquillianPersistenceVersion}"
	// testCompile "org.jboss.arquillian.extension:arquillian-persistence-spi:${libraryVersions.arquillianPersistenceVersion}"
	testCompile "org.jboss.arquillian.extension:arquillian-persistence-dbunit:${libraryVersions.arquillianPersistenceVersion}"

	// jboss arquilian / shrinkwrap
	testCompile "org.jboss.arquillian.junit:arquillian-junit-container:${libraryVersions.arquillianVersion}"
	testCompile "org.jboss.arquillian.protocol:arquillian-protocol-servlet:${libraryVersions.arquillianVersion}"

	testCompile "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:${libraryVersions.shrinkWrapResolverGradleVersion}"
	testCompile "org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-gradle-depchain:2.2.0-alpha-2"

	jbossEmbeddedTestRuntime "org.wildfly:wildfly-arquillian-container-managed:${libraryVersions.wildflyVersion}"

	jbossRemoteTestRuntime "org.wildfly:wildfly-arquillian-container-remote:${libraryVersions.wildflyVersion}"

	glassfishEmbeddedTestRuntime "org.jboss.arquillian.container:arquillian-glassfish-embedded-3.1:1.0.0.CR4"
	glassfishEmbeddedTestRuntime "org.glassfish.main.extras:glassfish-embedded-all:${libraryVersions.glassfishVersion}"
}

// querydsl configuration
querydsl {
  jpa = true
  querydslSourcesDir = 'build/querydsl/java'
}

sourceSets.main.java.srcDir 'build/querydsl/java'

// jbossEmbeddedTest
task jbossEmbeddedTest(type: Test)

jbossEmbeddedTest {
	include '**/integration/*'

	systemProperty 'arquillian.launch', "jbossas-embedded"
	systemProperty 'java.util.logging.manager', 'org.jboss.logmanager.LogManager'
}

// jbossRemoteTest
task jbossRemoteTest(type: Test)

jbossRemoteTest {
	include '**/integration/*'

	systemProperty 'arquillian.launch', "jbossas-remote"
}

// glassfishEmbeddedTest
task glassfishEmbeddedTest(type: Test) {
	include '**/integration/*'

	systemProperty 'arquillian.launch', "glassfish-embedded"
	systemProperty 'java.util.logging.config.file', "${projectDir}/src/test/resources-glassfish-embedded/logging.properties"
	systemProperty 'derby.stream.error.file', '${projectDir}/build/derby.log'
}

sourceSets {
	test {
		resources { srcDir 'src/test/resources' }
		resources { srcDir 'src/test/resources-jbossas-embedded' }

		compileClasspath += main.output + configurations.provided + main.compileClasspath
		runtimeClasspath += main.output + configurations.provided + main.compileClasspath + main.runtimeClasspath
	}
}

tasks.withType(Test).matching({ t-> t.name.endsWith('Test') } as Spec).each { t ->

	if (System.getProperty('test.debug', 'false') == 'true') {
		t.jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'
	}
	if (System.getProperty('test.single', '') != '') {
		t.includes = [
			System.getProperty('test.single')
		]
	}
	t.testLogging.showStandardStreams = true
	t.testClassesDir = project.sourceSets.test.output.classesDir
	t.classpath = project.configurations.getByName(t.name + 'Runtime') +
			project.sourceSets.main.output +
			project.sourceSets.test.output
	if (t.name.startsWith('jbossEmbedded')) {
		t.classpath += files('src/test/resources-jbossas-embedded')
	} else if(t.name.startsWith('glassfishEmbedded')){
		t.classpath += files('src/test/resources-glassfish-embedded')
	}
}

test {
	exclude '**/integration/*'
	testLogging.showStandardStreams = true

	jvmArgs '-XX:MaxPermSize=256m'
	
	systemProperty 'slf4jVersion', libraryVersions.slf4jVersion
}

eclipse {
	classpath {
		//you can tweak the classpath of the Eclipse project by adding extra configurations:
		plusConfigurations += [
			configurations.jbossEmbeddedTestRuntime
		]

		//default settings for downloading sources and Javadoc:
		downloadSources = true
		downloadJavadoc = false
	}
}