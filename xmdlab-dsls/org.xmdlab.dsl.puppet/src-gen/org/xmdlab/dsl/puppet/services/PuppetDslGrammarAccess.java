/*
* generated by Xtext
*/
package org.xmdlab.dsl.puppet.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PuppetDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DslModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslModel");
		private final Assignment cNodeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNodeDslNodeParserRuleCall_0 = (RuleCall)cNodeAssignment.eContents().get(0);
		
		//DslModel:
		//	node=DslNode;
		public ParserRule getRule() { return rule; }

		//node=DslNode
		public Assignment getNodeAssignment() { return cNodeAssignment; }

		//DslNode
		public RuleCall getNodeDslNodeParserRuleCall_0() { return cNodeDslNodeParserRuleCall_0; }
	}

	public class DslNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cDomainKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDomainAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDomainQualifiedNameParserRuleCall_4_0 = (RuleCall)cDomainAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRoleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRoleDslRoleParserRuleCall_6_0 = (RuleCall)cRoleAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//DslNode:
		//	"Node" name=ID "domain" "=" domain=QualifiedName "{" role=DslRole "}";
		public ParserRule getRule() { return rule; }

		//"Node" name=ID "domain" "=" domain=QualifiedName "{" role=DslRole "}"
		public Group getGroup() { return cGroup; }

		//"Node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"domain"
		public Keyword getDomainKeyword_2() { return cDomainKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//domain=QualifiedName
		public Assignment getDomainAssignment_4() { return cDomainAssignment_4; }

		//QualifiedName
		public RuleCall getDomainQualifiedNameParserRuleCall_4_0() { return cDomainQualifiedNameParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//role=DslRole
		public Assignment getRoleAssignment_6() { return cRoleAssignment_6; }

		//DslRole
		public RuleCall getRoleDslRoleParserRuleCall_6_0() { return cRoleDslRoleParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}

	public class DslRoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslRole");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProfilesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProfilesDslProfileParserRuleCall_3_0 = (RuleCall)cProfilesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DslRole:
		//	"Role" name=ID "{" profiles+=DslProfile+ "}";
		public ParserRule getRule() { return rule; }

		//"Role" name=ID "{" profiles+=DslProfile+ "}"
		public Group getGroup() { return cGroup; }

		//"Role"
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//profiles+=DslProfile+
		public Assignment getProfilesAssignment_3() { return cProfilesAssignment_3; }

		//DslProfile
		public RuleCall getProfilesDslProfileParserRuleCall_3_0() { return cProfilesDslProfileParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DslProfileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslProfile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProfileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cForgeModulesAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cForgeModulesDslForgeModuleParserRuleCall_3_0_0 = (RuleCall)cForgeModulesAssignment_3_0.eContents().get(0);
		private final Assignment cGitModulesAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cGitModulesDslGitModuleParserRuleCall_3_1_0 = (RuleCall)cGitModulesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DslProfile:
		//	"Profile" name=ID "{" (forgeModules+=DslForgeModule | gitModules+=DslGitModule)+ "}";
		public ParserRule getRule() { return rule; }

		//"Profile" name=ID "{" (forgeModules+=DslForgeModule | gitModules+=DslGitModule)+ "}"
		public Group getGroup() { return cGroup; }

		//"Profile"
		public Keyword getProfileKeyword_0() { return cProfileKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(forgeModules+=DslForgeModule | gitModules+=DslGitModule)+
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//forgeModules+=DslForgeModule
		public Assignment getForgeModulesAssignment_3_0() { return cForgeModulesAssignment_3_0; }

		//DslForgeModule
		public RuleCall getForgeModulesDslForgeModuleParserRuleCall_3_0_0() { return cForgeModulesDslForgeModuleParserRuleCall_3_0_0; }

		//gitModules+=DslGitModule
		public Assignment getGitModulesAssignment_3_1() { return cGitModulesAssignment_3_1; }

		//DslGitModule
		public RuleCall getGitModulesDslGitModuleParserRuleCall_3_1_0() { return cGitModulesDslGitModuleParserRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class DslForgeModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslForgeModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameForgeIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cVersionKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVersionAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVersionVersionParserRuleCall_2_2_0 = (RuleCall)cVersionAssignment_2_2.eContents().get(0);
		
		//DslForgeModule:
		//	"Module" name=ForgeId ("version" "=" version=Version)?;
		public ParserRule getRule() { return rule; }

		//"Module" name=ForgeId ("version" "=" version=Version)?
		public Group getGroup() { return cGroup; }

		//"Module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ForgeId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ForgeId
		public RuleCall getNameForgeIdParserRuleCall_1_0() { return cNameForgeIdParserRuleCall_1_0; }

		//("version" "=" version=Version)?
		public Group getGroup_2() { return cGroup_2; }

		//"version"
		public Keyword getVersionKeyword_2_0() { return cVersionKeyword_2_0; }

		//"="
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }

		//version=Version
		public Assignment getVersionAssignment_2_2() { return cVersionAssignment_2_2; }

		//Version
		public RuleCall getVersionVersionParserRuleCall_2_2_0() { return cVersionVersionParserRuleCall_2_2_0; }
	}

	public class DslGitModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DslGitModule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModuleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameForgeIdParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cGitKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGitSTRINGTerminalRuleCall_4_0 = (RuleCall)cGitAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cRefKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cRefAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cRefSTRINGTerminalRuleCall_5_2_0 = (RuleCall)cRefAssignment_5_2.eContents().get(0);
		
		//DslGitModule:
		//	"Module" name=ForgeId "git" "=" git=STRING ("ref" "=" ref=STRING)?;
		public ParserRule getRule() { return rule; }

		//"Module" name=ForgeId "git" "=" git=STRING ("ref" "=" ref=STRING)?
		public Group getGroup() { return cGroup; }

		//"Module"
		public Keyword getModuleKeyword_0() { return cModuleKeyword_0; }

		//name=ForgeId
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ForgeId
		public RuleCall getNameForgeIdParserRuleCall_1_0() { return cNameForgeIdParserRuleCall_1_0; }

		//"git"
		public Keyword getGitKeyword_2() { return cGitKeyword_2; }

		//"="
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }

		//git=STRING
		public Assignment getGitAssignment_4() { return cGitAssignment_4; }

		//STRING
		public RuleCall getGitSTRINGTerminalRuleCall_4_0() { return cGitSTRINGTerminalRuleCall_4_0; }

		//("ref" "=" ref=STRING)?
		public Group getGroup_5() { return cGroup_5; }

		//"ref"
		public Keyword getRefKeyword_5_0() { return cRefKeyword_5_0; }

		//"="
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }

		//ref=STRING
		public Assignment getRefAssignment_5_2() { return cRefAssignment_5_2; }

		//STRING
		public RuleCall getRefSTRINGTerminalRuleCall_5_2_0() { return cRefSTRINGTerminalRuleCall_5_2_0; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//(=> "." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class VersionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Version");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//Version:
		//	ID ("." ID) ("." ID);
		public ParserRule getRule() { return rule; }

		//ID ("." ID) ("." ID)
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//=> "." ID
		public Group getGroup_1() { return cGroup_1; }

		//=> "."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }

		//=> "." ID
		public Group getGroup_2() { return cGroup_2; }

		//=> "."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class ForgeIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForgeId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//ForgeId:
		//	ID => "-" ID;
		public ParserRule getRule() { return rule; }

		//ID => "-" ID
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//=> "-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//ID
		public RuleCall getIDTerminalRuleCall_2() { return cIDTerminalRuleCall_2; }
	}
	
	
	private final DslModelElements pDslModel;
	private final DslNodeElements pDslNode;
	private final DslRoleElements pDslRole;
	private final DslProfileElements pDslProfile;
	private final DslForgeModuleElements pDslForgeModule;
	private final DslGitModuleElements pDslGitModule;
	private final QualifiedNameElements pQualifiedName;
	private final VersionElements pVersion;
	private final ForgeIdElements pForgeId;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PuppetDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDslModel = new DslModelElements();
		this.pDslNode = new DslNodeElements();
		this.pDslRole = new DslRoleElements();
		this.pDslProfile = new DslProfileElements();
		this.pDslForgeModule = new DslForgeModuleElements();
		this.pDslGitModule = new DslGitModuleElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pVersion = new VersionElements();
		this.pForgeId = new ForgeIdElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xmdlab.dsl.puppet.PuppetDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DslModel:
	//	node=DslNode;
	public DslModelElements getDslModelAccess() {
		return pDslModel;
	}
	
	public ParserRule getDslModelRule() {
		return getDslModelAccess().getRule();
	}

	//DslNode:
	//	"Node" name=ID "domain" "=" domain=QualifiedName "{" role=DslRole "}";
	public DslNodeElements getDslNodeAccess() {
		return pDslNode;
	}
	
	public ParserRule getDslNodeRule() {
		return getDslNodeAccess().getRule();
	}

	//DslRole:
	//	"Role" name=ID "{" profiles+=DslProfile+ "}";
	public DslRoleElements getDslRoleAccess() {
		return pDslRole;
	}
	
	public ParserRule getDslRoleRule() {
		return getDslRoleAccess().getRule();
	}

	//DslProfile:
	//	"Profile" name=ID "{" (forgeModules+=DslForgeModule | gitModules+=DslGitModule)+ "}";
	public DslProfileElements getDslProfileAccess() {
		return pDslProfile;
	}
	
	public ParserRule getDslProfileRule() {
		return getDslProfileAccess().getRule();
	}

	//DslForgeModule:
	//	"Module" name=ForgeId ("version" "=" version=Version)?;
	public DslForgeModuleElements getDslForgeModuleAccess() {
		return pDslForgeModule;
	}
	
	public ParserRule getDslForgeModuleRule() {
		return getDslForgeModuleAccess().getRule();
	}

	//DslGitModule:
	//	"Module" name=ForgeId "git" "=" git=STRING ("ref" "=" ref=STRING)?;
	public DslGitModuleElements getDslGitModuleAccess() {
		return pDslGitModule;
	}
	
	public ParserRule getDslGitModuleRule() {
		return getDslGitModuleAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Version:
	//	ID ("." ID) ("." ID);
	public VersionElements getVersionAccess() {
		return pVersion;
	}
	
	public ParserRule getVersionRule() {
		return getVersionAccess().getRule();
	}

	//ForgeId:
	//	ID => "-" ID;
	public ForgeIdElements getForgeIdAccess() {
		return pForgeId;
	}
	
	public ParserRule getForgeIdRule() {
		return getForgeIdAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
