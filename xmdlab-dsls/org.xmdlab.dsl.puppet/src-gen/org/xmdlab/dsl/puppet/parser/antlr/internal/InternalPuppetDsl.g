/*
* generated by Xtext
*/
grammar InternalPuppetDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xmdlab.dsl.puppet.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xmdlab.dsl.puppet.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xmdlab.dsl.puppet.services.PuppetDslGrammarAccess;

}

@parser::members {

 	private PuppetDslGrammarAccess grammarAccess;
 	
    public InternalPuppetDslParser(TokenStream input, PuppetDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DslModel";	
   	}
   	
   	@Override
   	protected PuppetDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDslModel
entryRuleDslModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDslModelRule()); }
	 iv_ruleDslModel=ruleDslModel 
	 { $current=$iv_ruleDslModel.current; } 
	 EOF 
;

// Rule DslModel
ruleDslModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDslModelAccess().getNodeDslNodeParserRuleCall_0()); 
	    }
		lv_node_0_0=ruleDslNode		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslModelRule());
	        }
       		set(
       			$current, 
       			"node",
        		lv_node_0_0, 
        		"DslNode");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDslNode
entryRuleDslNode returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDslNodeRule()); }
	 iv_ruleDslNode=ruleDslNode 
	 { $current=$iv_ruleDslNode.current; } 
	 EOF 
;

// Rule DslNode
ruleDslNode returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Node' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDslNodeAccess().getNodeKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDslNodeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDslNodeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='domain' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDslNodeAccess().getDomainKeyword_2());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDslNodeAccess().getEqualsSignKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDslNodeAccess().getDomainQualifiedNameParserRuleCall_4_0()); 
	    }
		lv_domain_4_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslNodeRule());
	        }
       		set(
       			$current, 
       			"domain",
        		lv_domain_4_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDslNodeAccess().getLeftCurlyBracketKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDslNodeAccess().getRoleDslRoleParserRuleCall_6_0()); 
	    }
		lv_role_6_0=ruleDslRole		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslNodeRule());
	        }
       		set(
       			$current, 
       			"role",
        		lv_role_6_0, 
        		"DslRole");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getDslNodeAccess().getRightCurlyBracketKeyword_7());
    }
)
;





// Entry rule entryRuleDslRole
entryRuleDslRole returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDslRoleRule()); }
	 iv_ruleDslRole=ruleDslRole 
	 { $current=$iv_ruleDslRole.current; } 
	 EOF 
;

// Rule DslRole
ruleDslRole returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Role' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDslRoleAccess().getRoleKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDslRoleAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDslRoleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDslRoleAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDslRoleAccess().getProfilesDslProfileParserRuleCall_3_0()); 
	    }
		lv_profiles_3_0=ruleDslProfile		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslRoleRule());
	        }
       		add(
       			$current, 
       			"profiles",
        		lv_profiles_3_0, 
        		"DslProfile");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDslRoleAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDslProfile
entryRuleDslProfile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDslProfileRule()); }
	 iv_ruleDslProfile=ruleDslProfile 
	 { $current=$iv_ruleDslProfile.current; } 
	 EOF 
;

// Rule DslProfile
ruleDslProfile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Profile' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDslProfileAccess().getProfileKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getDslProfileAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDslProfileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDslProfileAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDslProfileAccess().getForgeModulesDslForgeModuleParserRuleCall_3_0_0()); 
	    }
		lv_forgeModules_3_0=ruleDslForgeModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslProfileRule());
	        }
       		add(
       			$current, 
       			"forgeModules",
        		lv_forgeModules_3_0, 
        		"DslForgeModule");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDslProfileAccess().getGitModulesDslGitModuleParserRuleCall_3_1_0()); 
	    }
		lv_gitModules_4_0=ruleDslGitModule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslProfileRule());
	        }
       		add(
       			$current, 
       			"gitModules",
        		lv_gitModules_4_0, 
        		"DslGitModule");
	        afterParserOrEnumRuleCall();
	    }

)
))+	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDslProfileAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleDslForgeModule
entryRuleDslForgeModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDslForgeModuleRule()); }
	 iv_ruleDslForgeModule=ruleDslForgeModule 
	 { $current=$iv_ruleDslForgeModule.current; } 
	 EOF 
;

// Rule DslForgeModule
ruleDslForgeModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDslForgeModuleAccess().getModuleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDslForgeModuleAccess().getNameForgeIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleForgeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslForgeModuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ForgeId");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='version' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDslForgeModuleAccess().getVersionKeyword_2_0());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDslForgeModuleAccess().getEqualsSignKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDslForgeModuleAccess().getVersionVersionParserRuleCall_2_2_0()); 
	    }
		lv_version_4_0=ruleVersion		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslForgeModuleRule());
	        }
       		set(
       			$current, 
       			"version",
        		lv_version_4_0, 
        		"Version");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleDslGitModule
entryRuleDslGitModule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDslGitModuleRule()); }
	 iv_ruleDslGitModule=ruleDslGitModule 
	 { $current=$iv_ruleDslGitModule.current; } 
	 EOF 
;

// Rule DslGitModule
ruleDslGitModule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Module' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDslGitModuleAccess().getModuleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDslGitModuleAccess().getNameForgeIdParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleForgeId		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslGitModuleRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ForgeId");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='git' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDslGitModuleAccess().getGitKeyword_2());
    }
	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDslGitModuleAccess().getEqualsSignKeyword_3());
    }
(
(
		lv_git_4_0=RULE_STRING
		{
			newLeafNode(lv_git_4_0, grammarAccess.getDslGitModuleAccess().getGitSTRINGTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDslGitModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"git",
        		lv_git_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='ref' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getDslGitModuleAccess().getRefKeyword_5_0());
    }
	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDslGitModuleAccess().getEqualsSignKeyword_5_1());
    }
(
(
		lv_ref_7_0=RULE_STRING
		{
			newLeafNode(lv_ref_7_0, grammarAccess.getDslGitModuleAccess().getRefSTRINGTerminalRuleCall_5_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDslGitModuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ref",
        		lv_ref_7_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleVersion
entryRuleVersion returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVersionRule()); } 
	 iv_ruleVersion=ruleVersion 
	 { $current=$iv_ruleVersion.current.getText(); }  
	 EOF 
;

// Rule Version
ruleVersion returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getVersionAccess().getIDTerminalRuleCall_0()); 
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVersionAccess().getFullStopKeyword_1_0()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getVersionAccess().getIDTerminalRuleCall_1_1()); 
    }
)(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVersionAccess().getFullStopKeyword_2_0()); 
    }
)    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getVersionAccess().getIDTerminalRuleCall_2_1()); 
    }
))
    ;





// Entry rule entryRuleForgeId
entryRuleForgeId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getForgeIdRule()); } 
	 iv_ruleForgeId=ruleForgeId 
	 { $current=$iv_ruleForgeId.current.getText(); }  
	 EOF 
;

// Rule ForgeId
ruleForgeId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getForgeIdAccess().getIDTerminalRuleCall_0()); 
    }
((
	'-' 
)=>
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getForgeIdAccess().getHyphenMinusKeyword_1()); 
    }
)    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getForgeIdAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


