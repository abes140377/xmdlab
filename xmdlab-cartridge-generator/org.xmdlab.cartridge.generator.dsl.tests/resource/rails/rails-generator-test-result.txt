MULTIPLE FILES WERE GENERATED

File 1 : /myProject/null/de/freund/xgen/cartridge/rails/generator/RailsCartridgeGenerator.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.generator.CartridgeGeneratorXtendTpl
 */
package de.freund.xgen.cartridge.rails.generator

/**
 * The RailsCartridgeGeneratorStandaloneSetup
 *
 * @author Sebastian Freund<seba1403@googlemail.com>
 *
 */
class RailsCartridgeGenerator extends RailsCartridgeGeneratorBase {

}

File 2 : /myProject/null/de/freund/xgen/cartridge/rails/metafacade/ApplicationMetafacadeImpl.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.metafacade.CartridgeMetafacadeImplXtendTpl
 */
package de.freund.xgen.cartridge.rails.metafacade


class ApplicationMetafacadeImpl extends ApplicationMetafacadeBase {

}

File 3 : /myProject/null/de/freund/xgen/cartridge/rails/metafacade/ModelMetafacadeImpl.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.metafacade.CartridgeMetafacadeImplXtendTpl
 */
package de.freund.xgen.cartridge.rails.metafacade


class ModelMetafacadeImpl extends ModelMetafacadeBase {

}

File 4 : /myProject/src-gen/de/freund/xgen/cartridge/rails/RailsCartridgeGeneratorModule.java

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.generator.CartridgeGeneratorModuleTpl
 */
package de.freund.xgen.cartridge.rails;

import org.eclipse.xtext.generator.IOutputConfigurationProvider;
//import org.eclipse.xtext.generator.JavaIoFileSystemAccess;
import org.eclipse.xtext.service.AbstractGenericModule;

import com.google.inject.Binder;

import de.freund.xgen.cartridge.rails.util.RailsCartridgeOutputConfigurationProvider;

import de.freund.xgen.cartridge.rails.metafacade.*;
import de.freund.xgen.cartridge.rails.generator.*;

/**
 * The RailsCartridgeGeneratorModule
 *
 * @author Sebastian Freund<seba1403@googlemail.com>
 *
 */
public class RailsCartridgeGeneratorModule extends AbstractGenericModule {

	@Override
	public void configure(Binder binder) {
		super.configure(binder);
	}

	public Class<? extends org.eclipse.xtext.generator.IGenerator> bindIGenerator() {
		return RailsCartridgeGenerator.class;
	}

	public Class<? extends IOutputConfigurationProvider> bindIOutputConfigurationProvider() {
		return RailsCartridgeOutputConfigurationProvider.class;
	}
	
	public Class<? extends ModelMetafacade> bindModelMetafacade() {
		return ModelMetafacadeImpl.class;
	}
	public Class<? extends ApplicationMetafacade> bindApplicationMetafacade() {
		return ApplicationMetafacadeImpl.class;
	}

	// public Class<? extends JavaIoFileSystemAccess> bindJavaIoFileSystemAccess() {
	//	return de.freund.xgen.xtext.core.fsa.JavaIoFileSystemAccessExt.class;
	// }
}

File 5 : /myProject/src-gen/de/freund/xgen/cartridge/rails/RailsCartridgeGeneratorStandaloneSetup.java

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.generator.CartridgeGeneratorStandaloneSetupTpl
 */
package de.freund.xgen.cartridge.rails;

import org.eclipse.xtext.util.Modules2;

import com.google.inject.Guice;
import com.google.inject.Injector;

/**
 * The RailsCartridgeGeneratorStandaloneSetup
 *
 * @author Sebastian Freund<seba1403@googlemail.com>
 *
 */
public class RailsCartridgeGeneratorStandaloneSetup extends org.xmdlab.dsl.application.ApplicationDslStandaloneSetup {

	public static void doSetup() {
		new RailsCartridgeGeneratorStandaloneSetup().createInjectorAndDoEMFRegistration();
	}
	
	@Override
	public Injector createInjector() {
		// Reihenfolge ist entscheidend, RailsCartridgeGeneratorModule
		// muss nach DomainmodelRuntimeModule kommen
		return Guice.createInjector(Modules2.mixin(
			new org.xmdlab.dsl.application.ApplicationDslRuntimeModule(),
			new RailsCartridgeGeneratorModule()));
			//new de.freund.xgen.xtext.core.CartridgeGeneratorCoreModule()
	}
}

File 6 : /myProject/src-gen/de/freund/xgen/cartridge/rails/generator/RailsCartridgeGenerator.mwe2

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.generator.CartridgGeneratorMwe2Tpl
 */
module de.freund.xgen.cartridge.rails.generator.RailsCartridgeGenerator

import org.eclipse.emf.mwe.utils.*

var modelPath

var baseDir

/**
*
*/
Workflow {
	// print welcome message
	component = org.xmdlab.cartridge.common.workflow.WelcomeMessage {
		cartridge = "Rails Cartridge"
	}
	
	// read model file
	component = org.eclipse.xtext.mwe.Reader {
		path = modelPath
		// this class will be generated by the xtext generator
		register = de.freund.xgen.cartridge.rails.RailsCartridgeGeneratorStandaloneSetup {}
		loadResource = {
			slot = "model"
		}
	}
	
	// invoke the transformation
	component = de.freund.xgen.cartridge.rails.transformation.RailsCartridgeTransformationComponent {
		modelSlot = "model"
		outputSlot = "transformed"
	}
	
	// init metafacades
	
	// run generator
	component = org.eclipse.xtext.generator.GeneratorComponent {
		register = de.freund.xgen.cartridge.rails.RailsCartridgeGeneratorStandaloneSetup {}
		
		slot = 'transformed'
		
		outlet = {
			outletName = "base"
			path = baseDir
		}
	}
}

File 7 : /myProject/src-gen/de/freund/xgen/cartridge/rails/generator/RailsCartridgeGeneratorBase.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.generator.CartridgeGeneratorBaseXtendTpl
 */
package de.freund.xgen.cartridge.rails.generator

import com.google.inject.Inject
import com.google.inject.Provider
import static de.freund.xgen.cartridge.rails.util.RailsCartridgeOutputConfigurationProvider.*
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
//import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.emf.ecore.resource.Resource

import de.freund.xgen.cartridge.rails.util.RailsCartridgeProjectProperties

import de.freund.xgen.cartridge.rails.metafacade.*


/**
 * The RailsCartridgeGeneratorBase
 *
 * @author Sebastian Freund<seba1403@googlemail.com>
 *
 */
abstract class RailsCartridgeGeneratorBase implements IGenerator {

	// @Inject extension IQualifiedNameProvider nameProvider
	@Inject RailsCartridgeProjectProperties properties

	@Inject ModelMetafacade modelMetafacade
	@Inject ApplicationMetafacade applicationMetafacade

	/**
	* This method is a long sequence of calling all templates for the code generation
	*/
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var model = resource.getContents().get(0) as org.xmdlab.dsl.application.applicationDsl.DslModel
		modelMetafacade.modelResource = model
		
		// Init properties
		properties.modelUri = resource.URI
		
		// Init metafacades
		applicationMetafacade.modelResource = resource.allContents.filter(typeof(org.xmdlab.dsl.application.applicationDsl.DslApplication)).head
		
		// compile templates
	}

	
}

File 8 : /myProject/src-gen/de/freund/xgen/cartridge/rails/metafacade/ApplicationMetafacade.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.metafacade.CartridgeMetafacadeXtendTpl
 */
package de.freund.xgen.cartridge.rails.metafacade

import org.xmdlab.cartridge.common.metafacade.Metafacade

interface ApplicationMetafacade extends Metafacade<org.xmdlab.dsl.application.applicationDsl.DslApplication> {
}

File 9 : /myProject/src-gen/de/freund/xgen/cartridge/rails/metafacade/ApplicationMetafacadeBase.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.metafacade.CartridgeMetafacadeBaseXtendTpl
 */
package de.freund.xgen.cartridge.rails.metafacade

import org.xmdlab.cartridge.common.metafacade.MetafacadeBase

abstract class ApplicationMetafacadeBase extends MetafacadeBase<org.xmdlab.dsl.application.applicationDsl.DslApplication> implements ApplicationMetafacade {
	
}

File 10 : /myProject/src-gen/de/freund/xgen/cartridge/rails/metafacade/ModelMetafacade.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.metafacade.CartridgeMetafacadeXtendTpl
 */
package de.freund.xgen.cartridge.rails.metafacade

import org.xmdlab.cartridge.common.metafacade.Metafacade

interface ModelMetafacade extends Metafacade<org.xmdlab.dsl.application.applicationDsl.DslModel> {
}

File 11 : /myProject/src-gen/de/freund/xgen/cartridge/rails/metafacade/ModelMetafacadeBase.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.metafacade.CartridgeMetafacadeBaseXtendTpl
 */
package de.freund.xgen.cartridge.rails.metafacade

import org.xmdlab.cartridge.common.metafacade.MetafacadeBase

abstract class ModelMetafacadeBase extends MetafacadeBase<org.xmdlab.dsl.application.applicationDsl.DslModel> implements ModelMetafacade {
	
}

File 12 : /myProject/src-gen/de/freund/xgen/cartridge/rails/util/RailsCartridgeOutputConfigurationProvider.java

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.generator.CartridgeOutputConfigurationProviderTpl
 */
package de.freund.xgen.cartridge.rails.util;

import java.util.Set;

import org.eclipse.xtext.generator.OutputConfiguration;
import org.eclipse.xtext.generator.OutputConfigurationProvider;

/**
 * Configuration of output locations and settings for code generation.
 *
 * @author Sebastian Freund<seba1403@googlemail.com>
 *
 */
public class RailsCartridgeOutputConfigurationProvider extends
		OutputConfigurationProvider {
	Set<OutputConfiguration> outputs = super.getOutputConfigurations();

	public static String OUTPUTCONFIG_BASE = "base";

	@Override
	public Set<OutputConfiguration> getOutputConfigurations() {
	//
	OutputConfiguration baseOutput = new OutputConfiguration(
		OUTPUTCONFIG_BASE);
	baseOutput.setDescription("base output configuraton");
	baseOutput.setOverrideExistingResources(false);
					
	outputs.add(baseOutput);
	
		return outputs;
	}
}

File 13 : /myProject/src-gen/de/freund/xgen/cartridge/rails/util/RailsCartridgeProjectProperties.xtend

/**
 * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!
 * Xtend Template: org.xmdlab.cartridge.generator.dsl.templates.namespace.CartridgeProjectPropertiesTpl
 */
package de.freund.xgen.cartridge.rails.util;

import com.typesafe.config.Config
import com.typesafe.config.ConfigFactory
import java.io.File
import java.io.IOException
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.runtime.Path
import org.eclipse.emf.common.util.URI
import java.util.Map

/**
 * The org.xmdlab.cartridge.generator.dsl.templates.namespace.CartridgeProjectPropertiesTpl
 *
 * @author Sebastian Freund<seba1403@googlemail.com>
 *
 */
@com.google.inject.Singleton
public class RailsCartridgeProjectProperties {

	var Config _conf
	var URI modelUri

	def String getPropertyValue(String key) {
		getConf().getString(key)
	}

	def Config getConf() {
		if (_conf == null || _conf.entrySet().size() == 0) {
			_conf = ConfigFactory.parseFile(getConfigFile())
		}
		
		val Map<String, String> defaults = newHashMap()
		defaults.put("vmBox", "teamserver-precise64")
		
		_conf.withFallback(ConfigFactory.parseMap(defaults))

		return _conf
	}
	
	def File getConfigFile() {
		var String result = null

		val URI confUri = modelUri.trimSegments(1).appendSegment(
			modelUri.lastSegment().replace(".rails", ".properties"))

		if (confUri.isFile()) {
			result = confUri.toFileString()
		} else if (confUri.isPlatformResource()) {
			val String propertiesWorkspacePath = confUri.devicePath().replace("/resource", "")

			try {
				result = ResourcesPlugin::getWorkspace().getRoot().getFile(new Path(propertiesWorkspacePath)).
					getLocation().toFile().getCanonicalPath()
			} catch (IOException e) {
				System.out.println(e.toString())
				e.printStackTrace()
			}
		} else {
			result = new File(URI.createFileURI(confUri.segment(0)).toFileString()).getAbsolutePath()
		}

		return new File(result)
	}
	
	def setModelUri(URI modelUri) {
		this.modelUri = modelUri
	}
	
	// Properties for group vagrant
	def String getVmBox() {
		return getConf().getString("vagrant.vmBox")
	}
}

