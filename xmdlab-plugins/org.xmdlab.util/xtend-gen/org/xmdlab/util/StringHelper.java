package org.xmdlab.util;

import com.google.common.base.CaseFormat;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class StringHelper {
  /**
   * @param path
   */
  public static String getLastSegmentOfPath(final String path) {
    int _lastIndexOf = path.lastIndexOf("/");
    int _plus = (_lastIndexOf + 1);
    return path.substring(_plus);
  }
  
  /**
   * Convert java package to filesystem path
   * @param javaPackage
   * @return
   */
  public static String javaPackageToFsPath(final String javaPackage) {
    return javaPackage.replace(".", "/");
  }
  
  public static String camelCaseToUnderscore(final String input) {
    return CaseFormat.UPPER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, input);
  }
  
  /**
   * @param classname
   * @return
   */
  public static String getClassComment(final String classname) {
    return StringHelper.getClassComment(classname, null);
  }
  
  /**
   * @return
   */
  public static String getGeneratedComment(final String templateName) {
    StringBuilder builder = new StringBuilder();
    builder.append("/**\n");
    builder.append((" * Generated by Xgen. !!! DO NOT EDIT BY HAND IF THIS FILE WAS GENERATED TO A DERIVED DIRECTORY !!!" + "\n"));
    builder.append(((" * Xtend Template: " + templateName) + "\n"));
    builder.append(" */");
    return builder.toString();
  }
  
  /**
   * @param classname
   * @return
   */
  public static String getClassComment(final String classname, final String comment) {
    StringBuilder builder = new StringBuilder();
    builder.append("/**\n");
    boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(comment);
    if (_isNullOrEmpty) {
      builder.append(((" * The " + classname) + "\n"));
    } else {
      builder.append(((" * " + comment) + "\n"));
    }
    builder.append(" *\n");
    builder.append(" * @author Xmdlab generator\n");
    builder.append(" *\n");
    builder.append(" */");
    return builder.toString();
  }
}
