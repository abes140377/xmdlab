@Ecore(nsPrefix="xmdlab", nsURI="http://xmdlab.org/jee-application-mm")
//@GenModel(modelDirectory="./src-gen", importerID="org.eclipse.emf.importer.ecore", complianceLevel="5.0")
package org.xmdlab.jee.application.mm

abstract class NamedElement {
	String name
	String doc
	String hint
}

class MmApplication extends NamedElement {
	String basePackage
	contains MmModule[] modules opposite application
}

class MmModule extends NamedElement {
	String basePackage
	boolean external
	String persistenceUnit
	container MmApplication application opposite modules
	contains DomainObject[] domainObjects opposite module
	contains MmService[] services opposite module
	contains MmConsumer[] consumers opposite module
	contains MmResource[] resources opposite module
}

abstract class DomainObject extends NamedElement {
	contains MmReference[] references opposite from
	refers DomainObject ^extends
	contains MmAttribute[] attributes
	boolean ^abstract
	contains MmRepository repository opposite aggregateRoot
	container MmModule module opposite domainObjects
	boolean optimisticLocking = "true"
	boolean cache
	String ^package
	String databaseTable
	String extendsName
	String validate
	boolean gapClass
	refers MmInheritance inheritance
	String discriminatorColumnValue
	boolean aggregateRoot = "true"
	refers DomainObject belongsToAggregate
	contains MmDomainObjectOperation[] operations opposite domainObject
	refers MmTrait[] traits
}

class MmDomainObjectOperation extends MmOperation {
	container DomainObject domainObject opposite operations
	boolean ^abstract
}

class MmService extends NamedElement {
	contains MmServiceOperation[] operations opposite service
	refers MmRepository[] repositoryDependencies
	container MmModule module opposite services
	unique String[] otherDependencies
	refers MmService[] serviceDependencies
	boolean gapClass
	boolean webService
	boolean remoteInterface = "true"
	boolean localInterface = "true"
	refers MmSubscribe subscribe
}

class MmServiceOperation extends MmOperation {
	container MmService[1] service opposite operations
	refers MmServiceOperation serviceDelegate
	refers MmRepositoryOperation delegate
}

class MmRepository extends NamedElement {
	boolean gapClass
	container DomainObject aggregateRoot opposite repository
	contains MmRepositoryOperation[] operations opposite repository
	refers MmRepository[] repositoryDependencies
	unique String[] otherDependencies
	refers MmSubscribe subscribe
}

class MmRepositoryOperation extends MmOperation {
	boolean delegateToAccessObject = "false"
	String accessObjectName
	container MmRepository[1] repository opposite operations
}

class MmReference extends NamedElement {
	boolean many
	String collectionType
	refers MmReference ^opposite
	refers DomainObject[1] to
	String cascade
	String orderBy
	String visibility
	boolean changeable = "true"
	container DomainObject from opposite references
	boolean required
	String fetch
	boolean cache
	boolean naturalKey
	boolean inverse
	boolean nullable
	String databaseColumn
	String validate
	boolean ^transient
	String databaseJoinTable
	String databaseJoinColumn
}

class MmTypedElement extends NamedElement {
	String ^type
	String collectionType
	String mapKeyType
}

class MmAttribute extends MmTypedElement {
	boolean changeable = "true"
	String databaseType
	boolean nullable
	boolean naturalKey
	String visibility
	boolean required
	String length
	boolean index
	String databaseColumn
	String validate
	boolean ^transient
}

class MmDomainObjectTypedElement extends MmTypedElement {
	refers DomainObject domainObjectType
	refers DomainObject mapKeyDomainObjectType
}

class MmOperation extends MmDomainObjectTypedElement {
	String ^throws
	String visibility
	contains MmParameter[] parameters
	refers MmPublish publish
}

class MmParameter extends MmDomainObjectTypedElement {
}

class MmEntity extends DomainObject {
	boolean auditable = "true"
}

class MmValueObject extends DomainObject {
	boolean immutable = "true"
	boolean persistent = "true"
}

class MmBasicType extends MmValueObject {
}

class MmEnum extends DomainObject {
	contains MmEnumValue[] values
	boolean ordinal
}

class MmEnumValue extends NamedElement {
	contains MmEnumConstructorParameter[] parameters
}

class MmEnumConstructorParameter {
	String value
}

class MmInheritance {
	String discriminatorColumnName
	String discriminatorColumnLength
	MmInheritanceType ^type
	MmDiscriminatorType discriminatorType
}

enum MmInheritanceType {
	SINGLE_TABLE
	JOINED
}

enum MmDiscriminatorType {
	STRING
	CHAR
	INTEGER
}

class MmDataTransferObject extends MmValueObject {
}

class MmTrait extends DomainObject {
}

abstract class Event extends MmValueObject {
}

class MmCommandEvent extends Event {
}

class MmDomainEvent extends Event {
}

class MmConsumer extends NamedElement {
	container MmModule module opposite consumers
	refers MmRepository[] repositoryDependencies
	refers MmService[] serviceDependencies
	String channel
	refers DomainObject messageRoot
	unique String[] otherDependencies
	refers MmSubscribe subscribe
}

class MmPublish {
	String eventBus
	String topic
	refers Event eventType
}

class MmSubscribe {
	String eventBus
	String topic
}

class MmResource extends NamedElement {
	refers MmService[] serviceDependencies
	boolean gapClass
	String path
	contains MmResourceOperation[] operations opposite resource
	container MmModule module opposite resources
}

class MmResourceOperation extends MmOperation {
	container MmResource resource opposite operations
	String path
	MmHttpMethod httpMethod
	refers MmServiceOperation delegate
	String returnString
}

enum MmHttpMethod {
	UNDEFINED
	GET
	POST
	PUT
	DELETE
}
